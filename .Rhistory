# import TidyVerse
library(tidyverse)
# Load the data file
MechaCar <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Summarize the linear model results
summary(lm(MechaCar$mpg ~ MechaCar$`vehicle length` + MechaCar$`vehicle weight` + MechaCar$`spoiler angle` + MechaCar$`ground clearance` + MechaCar$AWD,data=MechaCar)) #generate summary statistics
# Linear model with vehicle length
model <- lm(MechaCar$`vehicle length` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y=`vehicle length`)) #import dataset into ggplot
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with ground clearance
model <- lm(MechaCar$`ground clearance` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y=`ground clearance`)) #import dataset into ggplot
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
setwd("~/OneDrive - ResureTek/BerkeleyExtension/M15-R/R_Analysis/MechaCar")
# Load the data file
MechaCar <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Summarize the linear model results
summary(lm(MechaCar$mpg ~ MechaCar$`vehicle length` + MechaCar$`vehicle weight` + MechaCar$`spoiler angle` + MechaCar$`ground clearance` + MechaCar$AWD,data=MechaCar)) #generate summary statistics
# Linear model with vehicle length
model <- lm(MechaCar$`vehicle length` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y=`vehicle length`)) #import dataset into ggplot
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with ground clearance
model <- lm(MechaCar$`ground clearance` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y=`ground clearance`)) #import dataset into ggplot
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with vehicle length
model <- lm(MechaCar$`vehicle length` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y=`vehicle length`)) #import dataset into ggplot
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Suspension Coil Summary
Suspension <- read.csv(file = 'Suspension_Coil.csv')
View(Suspension)
View(Suspension)
PSI_Lots <- Suspension[,c("Manufacturing_Lot","PSI")]
View(PSI_Lots)
PSI_Lots$PSI <- factor(PSI_Lots$PSI) #convert numeric column to factor
aov(PSI_Lots$Manufacturing_Lot ~ PSI_Lots$PSI,data=PSI_Lots) #compare means across multiple levels
aov(PSI_Lots$PSI,data=PSI_Lots ~ PSI_Lots$Manufacturing_Lot) #compare means across multiple levels
PSI_Lots <- Suspension[,c("Manufacturing_Lot","PSI")]
PSI_Lots$PSI <- factor(PSI_Lots$PSI) #convert numeric column to factor
aov(PSI_Lots$PSI,data=PSI_Lots ~ PSI_Lots$Manufacturing_Lot) #compare means across multiple levels
aov(PSI_Lots$PSI ~ PSI_Lots$Manufacturing_Lot, data=PSI_Lots) #compare means across multiple levels
#Suspension Coil T-Test
suspension_sample_1 <- Suspension %>% sample_n(50) #generate random sample of 50 data points
suspension_sample_2 <- Suspension %>% sample_n(50) #generate another sampled of 50 data points
TSummary = t.test(log10(suspension_sample_1$PSI),log10(suspension_sample_2$PSI)) #compare the means of two samples
print(t.test(Suspension$PSI, mu=1500)) # Print the T test
t.test(log10(suspension_sample_1$PSI),log10(suspension_sample_2$PSI)) #compare the means of two samples
print(t.test(log10(suspension_sample_1$PSI),log10(Lot1$PSI))) #compare the means of two samples
#filter the lots
Lot1 <- Suspension %>% filter(Suspension$Manufacturing_Lot == "Lot1")
Lot2 <- Suspension %>% filter(Suspension$Manufacturing_Lot == "Lot2")
Lot3 <- Suspension %>% filter(Suspension$Manufacturing_Lot == "Lot3")
print(t.test(log10(suspension_sample_1$PSI),log10(Lot1$PSI))) #compare the means of two samples
print(t.test(log10(suspension_sample_1$PSI),log10(Lot3$PSI))) #compare the means of two samples
print(t.test(Lot1$PSI, mu=1500)) # Print the T test
##Suspension Coil T-Test
print(t.test(Suspension$PSI, mu=1500)) # Print the T test
print(t.test(Lot1$PSI, mu=1500)) # Print the T test
print(t.test(Lot1$PSI, mu=1500)) # Print the T test
print(t.test(Lot1$PSI, mu=1500)) # Print the T test
##Suspension Coil T-Test
print(t.test(Suspension$PSI, mu=1500)) # Print the T test
print(t.test(Lot1$PSI, mu=1500)) # Print the T test
print(t.test(Lot2$PSI, mu=1500)) # Print the T test
print(t.test(Lot3$PSI, mu=1500)) # Print the T test
print(t.test(Suspension$PSI, mu=mean(Suspension$PSI))) # Print the T test
print(t.test(Lot1$PSI, mu=mean(Suspension$PSI)))
print(t.test(Suspension$PSI, mu=1500)) # Print the T test
print(t.test(Lot1$PSI, mu=1500)) # Print the T test
print(t.test(Lot2$PSI, mu=1500)) # Print the T test
print(t.test(Lot3$PSI, mu=1500)) # Print the T test
# All lots
summary(Suspension$PSI) # Mean and Median
STDD = sd(Suspension$PSI) # standard deviation
print(STDD)
Var = var(Suspension$PSI) # variance
print(Var)
print(t.test(Suspension$PSI, mu=1499)) # Print the T test
print(t.test(Lot1$PSI, mu=1499)) # Print the T test
print(t.test(Lot2$PSI, mu=1499)) # Print the T test
print(t.test(Lot3$PSI, mu=1499)) # Print the T test
##Suspension Coil T-Test
print(t.test(Suspension$PSI, mu=1500)) # Print the T test
print(t.test(Lot1$PSI, mu=1500)) # Print the T test
print(t.test(Lot2$PSI, mu=1500)) # Print the T test
print(t.test(Lot3$PSI, mu=1500)) # Print the T test
# Linear model with vehicle length
model <- lm(MechaCar$`vehicle length` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y=`vehicle length`)) #import dataset into ggplot
plt20 <- plt20 + ggtitle("Vehicle Lenght and MPG")
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
plt20 <- ggplot(MechaCar,aes(x=MPG,y="Vehicle Length")) #import dataset into ggplot
# Linear model with vehicle length
model <- lm(MechaCar$`vehicle length` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=MPG,y="Vehicle Length")) #import dataset into ggplot
plt20 <- plt20 + ggtitle("Vehicle Lenght and MPG")
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with ground clearance
# Linear model with vehicle length
model <- lm(MechaCar$`vehicle length` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y="Vehicle Length")) #import dataset into ggplot
plt20 <- plt20 + ggtitle("Vehicle Lenght and MPG")
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
Linear model with vehicle length
model <- lm(MechaCar$`vehicle length` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y="vehicle length")) #import dataset into ggplot
plt20 <- plt20 + ggtitle("Vehicle Lenght and MPG")
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with vehicle length
model <- lm(MechaCar$`vehicle length` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y="vehicle length")) #import dataset into ggplot
plt20 <- plt20 + ggtitle("Vehicle Lenght and MPG")
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with vehicle length
model <- lm(MechaCar$`vehicle length` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y="vehicle length")) #import dataset into ggplot
plt20 <- plt20 + ggtitle("Vehicle Lenght and MPG")
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with vehicle length
model <- lm(MechaCar$`vehicle length` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y="vehicle length")) #import dataset into ggplot
#plt20 <- plt20 + ggtitle("Vehicle Lenght and MPG")
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with ground clearance
model <- lm(MechaCar$`ground clearance` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y=`ground clearance`)) #import dataset into ggplot
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with ground clearance
model <- lm(MechaCar$`ground clearance` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y="ground clearance)) #import dataset into ggplot
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with ground clearance
model <- lm(MechaCar$`ground clearance` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y="ground clearance")) #import dataset into ggplot
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with ground clearance
model <- lm(MechaCar$`ground clearance` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y='ground clearance')) #import dataset into ggplot
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with ground clearance
model <- lm(MechaCar$`ground clearance` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y='ground clearance')) #import dataset into ggplot
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with ground clearance
model <- lm(MechaCar$'ground clearance' ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y='ground clearance')) #import dataset into ggplot
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with ground clearance
model <- lm(MechaCar$`ground clearance` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y=`ground clearance`)) #import dataset into ggplot
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with vehicle length
model <- lm(MechaCar$`vehicle length` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y='vehicle length')) #import dataset into ggplot
#plt20 <- plt20 + ggtitle("Vehicle Lenght and MPG")
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with vehicle length
model <- lm(MechaCar$`vehicle length` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y=`vehicle length`)) #import dataset into ggplot
#plt20 <- plt20 + ggtitle("Vehicle Lenght and MPG")
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with vehicle length
model <- lm(MechaCar$`vehicle length` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y=`vehicle length`)) + ggtitle("Vehicle Lenght and MPG") #import dataset into ggplot
#plt20 <- plt20 + ggtitle("Vehicle Lenght and MPG")
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Linear model with ground clearance
model <- lm(MechaCar$`ground clearance` ~ MechaCar$mpg,MechaCar) #create linear model
yvals <- model$coefficients["MechaCar$mpg"]*MechaCar$mpg + model$coefficients['(Intercept)'] #determine y-axis values
plt20 <- ggplot(MechaCar,aes(x=mpg,y=`ground clearance`)) + ggtitle("Ground Clearance and MPG") #import dataset into ggplot
plt20 + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
